#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'MeteoInfo'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/MeteoInfo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/MeteoInfo now"
  exit 64
end

include GLI::App

VILLE_DEFAUT = 'montreal' # ville par defaut
DEPOT_GENERAL = 'MIGeneral.txt' # depot pour la commande general
DEPOT_PRECIPITATION = 'MIPrecipitation.txt' # depot pour la commande precipitation
DEPOT_TEMPERATURE = 'MIPrecipitation.txt' # depot pour la commande temperature
MI = MeteoInfo # alias pour alleger le code

program_desc 'Application pour consulter les infos meteo'

version MI::VERSION

subcommand_option_handling :normal
arguments :strict

# desc 'Describe some switch here'
# switch [:s,:switch]

desc 'Ville utilise pour aller chercher les informations meteo'
default_value VILLE_DEFAUT
arg_name 'ville_utilise'
flag [:ville] # --ville=toronto

desc "Ecrit les informations d'une ville dans le fichier #{DEPOT_GENERAL}"
command :general do |general|
  general.desc 'Liste MeteoInfo.txt en plus'
  general.switch :lister # --lister

  general.action do |global_options,options,args|

    # Your command logic here
    p global_options
    p options
    p args
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "general command ran"
  end
end

desc "Ecrit les precipitations dans le fichier #{DEPOT_PRECIPITATION}"
arg_name '[date1] [date2]'
command :precipitation do |c|
  c.action do |global_options,options,args|
    puts "precipitation command ran"
    # p args.length
  end
end

desc "Ecrit la temperature dans le fichier #{DEPOT_TEMPERATURE}"
arg_name 'date'
command :temperature do |temperature|
  temperature.desc 'Pour preciser l\'unite utilise'
  temperature.flag :unite, :arg_name => 'unite', :default_value => 'C' # --unite=F

  temperature.action do |global_options,options,args|
    p global_options
    p options[:unite]
    p args
    puts "temperature command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
