#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'MeteoInfo'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/MeteoInfo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/MeteoInfo now"
  exit 64
end

include GLI::App

VILLE_DEFAUT = 'montreal' # ville par defaut
DEPOT_GENERAL = 'MIGeneral.txt' # depot pour la commande general
DEPOT_PRECIPITATION = 'MIPrecipitation.txt' # depot pour la commande precipitation
DEPOT_TEMPERATURE = 'MITemperature.txt' # depot pour la commande temperature
MI = MeteoInfo # alias pour alleger le code

program_desc 'Application pour consulter les infos meteo'

version MI::VERSION

subcommand_option_handling :normal
arguments :strict

# desc 'Describe some switch here'
# switch [:s,:switch]

desc 'Ville utilise pour aller chercher les informations meteo'
default_value VILLE_DEFAUT
arg_name 'ville_utilise'
flag [:ville] # --ville=toronto

desc "Ecrit les informations d'une ville dans le fichier #{DEPOT_GENERAL}"
command :general do |general|
  general.desc 'Liste MeteoInfo.txt en plus'
  general.switch :lister # --lister

  general.action do |global_options,options,args|

    # appel d'un api de meteo qui donne les infos pour la --ville
    # appel pour formater les infos dans une ligne
    # pour l'instant j'utilise des donnees hard coder dans un fichier txt
    ville = global_options[:ville]
    date = Time.now.strftime("%Y-%m-%d")
    ligne = File.readlines("BD.txt")
            .select { |ligne| ligne =~ /Ville: #{ville} - Date: #{date}/ }
    nouvel_info = ligne_to_info( ville, date, ligne )

    File.open(DEPOT_GENERAL, 'w') { |file| file.write(nouvel_info) }
    if options[:lister]
      puts nouvel_info
    end
  end
end

desc "Ecrit les precipitations dans le fichier #{DEPOT_PRECIPITATION}"
arg_name 'date [date2]...'
command :precipitation do |c|
  c.action do |global_options,options,args|

    erreur_nb_arguments args unless args.size > 0
    args.each do |date|
      erreur "Date mal formatee" unless date =~ MeteoInfo::Motifs::DATE
    end
    ville = global_options[:ville]
    lignes = Array.new
    args.each do |date|
      lignes << File.readlines("BD.txt")
                    .select { |ligne| ligne =~ /Ville: #{ville} - Date: #{date}/ }
    end
    precipitations = Array.new
    lignes.each do |ligne|
      precipitations << ligne[0].match(/Precipitation: (#{MeteoInfo::Motifs::PRECIPITATION})/)[1]
    end
    total_prec = precipitations.map(&:to_i).reduce(:+)
    a_ecrire = format("Il a plu pour %i mm de pluie a %s durant les dates mentionnees.",
                      total_prec,
                      ville)
    File.open(DEPOT_PRECIPITATION, 'w') { |file| file.write(a_ecrire) }
  end
end

desc "Ecrit la temperature dans le fichier #{DEPOT_TEMPERATURE}"
arg_name 'date'
command :temperature do |temperature|
  temperature.desc 'Pour preciser l\'unite utilise'
  temperature.flag :unite, :arg_name => 'unite', :default_value => 'C' # --unite=F

  temperature.action do |global_options,options,args|

    erreur_nb_arguments args unless args.size == 1
    erreur "Date mal formatee" unless args[0] =~ MeteoInfo::Motifs::DATE
    erreur "Unite inconnue" unless options[:unite] =~ MeteoInfo::Motifs::UNITE
    # appel d'un api de meteo qui donne les infos pour la --ville
    # appel pour formater les infos dans une ligne
    # pour l'instant j'utilise des donnees hard coder dans un fichier txt
    ville = global_options[:ville]
    date = args[0]
    ligne = File.readlines("BD.txt")
                  .select { |ligne| ligne =~ /Ville: #{ville} - Date: #{date}/ }
    temperature = ligne[0].match(/Temperature: (#{MeteoInfo::Motifs::TEMPERATURE})([CF])/)[1,2]
    if options[:unite] == "C" && temperature[1] == "F"
      temp = (temperature[0].to_i - 32) * 5/9
    elsif options[:unite] == "F" && temperature[1] == "C"
      temp = (temperature[0].to_i * 9/5) + 32
    else
      temp = temperature[0]
    end
    a_ecrire = format("La temperature a %s est de %s degre %s.",
                        ville,
                        temp,
                        options[:unite] == "C" ? "celsius" : "farenheit")
    File.open(DEPOT_TEMPERATURE, 'w') { |file| file.write(a_ecrire) }
  end
end

def ligne_to_info( ville, date, ligne )
  precipitation = ligne[0].match(/Precipitation: (#{MeteoInfo::Motifs::PRECIPITATION})/)[1]
  temperature = ligne[0].match(/Temperature: (#{MeteoInfo::Motifs::TEMPERATURE})/)[1]
  unite = ligne[0].match(/: #{MeteoInfo::Motifs::TEMPERATURE}([CF])/)[1]
  MeteoInfo::Info.new(ville, date, precipitation, temperature, unite)
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

def erreur( msg )
  exit_now! "*** Erreur: #{msg}"
end

def erreur_nb_arguments( *args )
  erreur "Nombre incorrect d'arguments: <<#{args.join(' ')}>>"
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
